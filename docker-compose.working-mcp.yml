# Working MCP Server Stack - Tested and Reliable
# All containers use minimal Node.js approach with health endpoints

version: '3.8'

services:
  # Infrastructure Services (Already Working)
  redis-working:
    image: redis:7-alpine
    container_name: dfs-redis-working
    restart: unless-stopped
    ports:
      - "6380:6379"
    volumes:
      - redis_working_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  postgres-working:
    image: postgres:15-alpine
    container_name: dfs-postgres-working
    restart: unless-stopped
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: dfs_user
      POSTGRES_PASSWORD: dfs_password_2024
      POSTGRES_DB: dfs_optimizer
    volumes:
      - postgres_working_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dfs_user -d dfs_optimizer"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Working MCP Servers (Using Minimal Approach)
  filesystem-working:
    image: mcp-filesystem-minimal
    container_name: filesystem-working
    restart: unless-stopped
    ports:
      - "8081:8080"
    volumes:
      - ./:/workspace:ro
      - mcp_working_data:/app/data
    environment:
      - NODE_ENV=production
      - MCP_SERVER=filesystem
    networks:
      - mcp-working
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); const req = http.request({hostname: 'localhost', port: 8080, path: '/health'}, (res) => process.exit(res.statusCode === 200 ? 0 : 1)); req.on('error', () => process.exit(1)); req.end();"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 15s

  memory-working:
    image: mcp-filesystem-minimal  # Reuse same base for now
    container_name: memory-working
    restart: unless-stopped
    ports:
      - "8082:8080"
    volumes:
      - mcp_working_data:/app/data
    environment:
      - NODE_ENV=production
      - MCP_SERVER=memory
    networks:
      - mcp-working
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); const req = http.request({hostname: 'localhost', port: 8080, path: '/health'}, (res) => process.exit(res.statusCode === 200 ? 0 : 1)); req.on('error', () => process.exit(1)); req.end();"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 15s

  process-working:
    image: mcp-filesystem-minimal  # Reuse same base for now
    container_name: process-working
    restart: unless-stopped
    ports:
      - "8083:8080"
    volumes:
      - ./:/workspace:ro
    environment:
      - NODE_ENV=production
      - MCP_SERVER=process
    networks:
      - mcp-working
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); const req = http.request({hostname: 'localhost', port: 8080, path: '/health'}, (res) => process.exit(res.statusCode === 200 ? 0 : 1)); req.on('error', () => process.exit(1)); req.end();"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 15s

  # Frontend Service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: dfs-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./apps/web:/app
    networks:
      - mcp-working
    depends_on:
      - redis-working
      - postgres-working
      - filesystem-working
      - memory-working
      - process-working
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Health Monitor and Auto-Repair System
  mcp-health-monitor:
    image: alpine:latest
    container_name: mcp-health-monitor
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: >
      sh -c "
      apk add --no-cache docker-cli curl &&
      echo 'üè• MCP Health Monitor Starting...' &&
      while true; do
        echo 'üîç Checking MCP servers...' &&
        
        # Check filesystem MCP
        if ! curl -f http://filesystem-working:8080/health >/dev/null 2>&1; then
          echo '‚ö†Ô∏è Filesystem MCP unhealthy - restarting...'
          docker restart filesystem-working
        fi
        
        # Check memory MCP  
        if ! curl -f http://memory-working:8080/health >/dev/null 2>&1; then
          echo '‚ö†Ô∏è Memory MCP unhealthy - restarting...'
          docker restart memory-working
        fi
        
        # Check process MCP
        if ! curl -f http://process-working:8080/health >/dev/null 2>&1; then
          echo '‚ö†Ô∏è Process MCP unhealthy - restarting...'
          docker restart process-working
        fi

        # Check frontend
        if ! curl -f http://frontend:3000 >/dev/null 2>&1; then
          echo '‚ö†Ô∏è Frontend unhealthy - restarting...'
          docker restart dfs-frontend
        fi
        
        echo '‚úÖ Health check complete - sleeping 60s'
        sleep 60
      done
      "
    depends_on:
      - filesystem-working
      - memory-working  
      - process-working
      - frontend
    networks:
      - mcp-working

networks:
  mcp-working:
    driver: bridge

volumes:
  redis_working_data:
  postgres_working_data:
  mcp_working_data:
