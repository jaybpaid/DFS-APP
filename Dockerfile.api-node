# Node.js API Dockerfile
# Use a multi-stage build for a smaller final image

# Stage 1: Build dependencies
FROM node:18-slim AS builder

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y curl ca-certificates && rm -rf /var/lib/apt/lists/*

# Set npm registry to http to avoid SSL issues during build
RUN npm config set registry http://registry.npmjs.org/

  # Install pnpm and dependencies
  RUN npm install -g pnpm
  COPY package.json pnpm-workspace.yaml tsconfig.base.json ./
  COPY apps/api/package.json ./apps/api/package.json
  RUN pnpm install --no-frozen-lockfile

  # Copy source code
  COPY apps/api ./apps/api

  # Force fresh install of all dependencies
  RUN rm -f pnpm-lock.yaml && pnpm install --no-frozen-lockfile

  # Build the application
  RUN cd apps/api && pnpm build

# Stage 2: Runtime image
 FROM node:18-slim

 WORKDIR /app

 # Install system dependencies (only curl needed for healthcheck)
 RUN apt-get update && apt-get install -y curl ca-certificates && rm -rf /var/lib/apt/lists/*

   # Copy package files and node_modules from builder stage
   COPY --from=builder /app/apps/api/package.json ./package.json
   COPY --from=builder /app/node_modules ./node_modules

  # Copy built application from builder stage
  COPY --from=builder /app/apps/api/dist ./dist

  # Set working directory to dist
  WORKDIR /app/dist

  # Set NODE_PATH to include node_modules
  ENV NODE_PATH=/app/node_modules

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:8000/api/healthz || exit 1

# Start the application
CMD ["node", "index.js"]
