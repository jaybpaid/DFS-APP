# Multi-stage Dockerfile for Unified DFS Platform
# Integrates DFSForge frontend with DFS-SYSTEM-2 backend

# ================================
# Stage 1: Frontend Build
# ================================
FROM node:22-alpine AS frontend-builder

WORKDIR /app

# Copy package files
COPY package*.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY DFSForge/client/package*.json ./DFSForge/client/
COPY apps/web/package*.json ./apps/web/

# Install pnpm and dependencies
RUN npm install -g pnpm@10.14.0
RUN pnpm install --frozen-lockfile

# Copy source code
COPY DFSForge/client/ ./DFSForge/client/
COPY apps/web/ ./apps/web/
COPY packages/ ./packages/
COPY tsconfig*.json ./

# Build frontend applications
RUN pnpm run build:dfsforge
RUN pnpm run build:web

# ================================
# Stage 2: Backend Base
# ================================
FROM python:3.11-slim AS backend-base

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    curl \
    postgresql-client \
    redis-tools \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN useradd --create-home --shell /bin/bash dfs

WORKDIR /app

# Copy Python requirements
COPY dfs-system-2/requirements.txt ./
COPY apps/api-python/requirements.txt ./api-python-requirements.txt

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt
RUN pip install --no-cache-dir -r api-python-requirements.txt

# ================================
# Stage 3: Integration Layer
# ================================
FROM backend-base AS integration-layer

# Copy backend source
COPY dfs-system-2/ ./dfs-system-2/
COPY apps/api-python/ ./apps/api-python/
COPY apps/api/ ./apps/api/

# Copy frontend build artifacts
COPY --from=frontend-builder /app/DFSForge/client/dist/ ./static/dfsforge/
COPY --from=frontend-builder /app/apps/web/dist/ ./static/web/

# Copy integration configuration
COPY docker/integration/ ./integration/
COPY docker/nginx/ ./nginx/

# Set up Python path
ENV PYTHONPATH=/app/dfs-system-2:/app/apps/api-python:$PYTHONPATH

# ================================
# Stage 4: Production Runtime
# ================================
FROM integration-layer AS production

# Switch to non-root user
USER dfs

# Expose ports
EXPOSE 8000 8765 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:8000/health || exit 1

# Copy startup script
COPY --chown=dfs:dfs docker/start-dfs-platform.sh ./start.sh
RUN chmod +x ./start.sh

# Start the unified platform
CMD ["./start.sh"]

# ================================
# Stage 5: Development
# ================================
FROM integration-layer AS development

# Install development tools
RUN pip install --no-cache-dir \
    pytest \
    black \
    pylint \
    mypy \
    pytest-cov \
    pytest-asyncio

# Install Node.js for development
RUN curl -fsSL https://deb.nodesource.com/setup_22.x | bash -
RUN apt-get install -y nodejs
RUN npm install -g pnpm@10.14.0

# Copy development configuration
COPY docker/dev/ ./dev/

# Set development environment
ENV NODE_ENV=development
ENV PYTHON_ENV=development

# Development startup
CMD ["./dev/start-dev.sh"]