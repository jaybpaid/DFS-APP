version: '3.8'

services:
  # --- Application Core ---
  dfs-gateway:
    build:
      context: .
      dockerfile: Dockerfile.gateway
    container_name: dfs-gateway
    ports:
      - "8080:8080" # Health
      - "9090:9090" # Metrics
    volumes:
      - ./data:/app/data
      - federation_evidence:/app/_federation/evidence
    environment:
      - LOG_LEVEL=INFO
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - BRAVE_API_KEY=${BRAVE_API_KEY}
      - GITHUB_PERSONAL_ACCESS_TOKEN=${GITHUB_TOKEN}
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    profiles:
      - gateway

  dfs-api:
    build: .
    container_name: dfs-pro-api
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  dfs-frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: dfs-frontend
    ports:
      - "3003:3000"
    environment:
      - VITE_API_URL=http://localhost:8000
    restart: unless-stopped
    depends_on:
      - dfs-api

  data-sync:
    build: .
    container_name: dfs-data-sync
    volumes:
      - ./data:/app/data
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    command: ["python3", "dynamic_data_manager.py"]
    restart: unless-stopped
    depends_on:
      dfs-api:
        condition: service_healthy

  # --- External Tool Shims ---
  brave-search-external: &shim-base
    image: node:18-alpine
    container_name: dfs-brave-search
    working_dir: /app
    volumes:
      - ./shims/brave-search.sh:/app/brave-search.sh
      - ./package.json:/app/package.json
    environment:
      - BRAVE_API_KEY=${BRAVE_API_KEY}
    command: ["sh", "brave-search.sh"]
    restart: unless-stopped
    profiles:
      - external-tools

  github-external:
    <<: *shim-base
    container_name: dfs-github
    volumes:
      - ./shims/github.sh:/app/github.sh
      - ./package.json:/app/package.json
    environment:
      - GITHUB_PERSONAL_ACCESS_TOKEN=${GITHUB_TOKEN}
    command: ["sh", "github.sh"]

  # ... other shims (puppeteer, filesystem, memory) can follow the same pattern ...

  # --- Infrastructure ---
  redis:
    image: redis:7-alpine
    container_name: dfs-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:15-alpine
    container_name: dfs-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Monitoring ---
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: dfs-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infra/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    restart: unless-stopped
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:10.1.0
    container_name: dfs-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped
    depends_on:
      - prometheus
    profiles:
      - monitoring

networks:
  mcp_internal:
    driver: bridge

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:
  memory_evidence:
  federation_evidence:
  mcp_data:
  playwright_cache:
  metabase_data:
  supabase_data:
